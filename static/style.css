/** 
 * CSS is a way to specify styles in an HTML document. In CSS we write selectors (i.e. `selector {}`) to choose what 
 * we want to style, then list the styles inside a `{}` block.
 * 
 * Selectors contain one or more elements. An element is either an HTML tag (`mytag` in CSS, `<mytag>` in HTML),
 * a class (`.myclass` in CSS, `<?? class="myclass">` in HTML), an id (`#myid` in CSS, `<?? id="myid">`), an
 * attribute (`[key=value]` in CSS, `<?? key="value">` in HTML), or a pseudo-selector (`:pseudo` in CSS only).
 * `*` can be used as a wildcard for any HTML tag.
 * 
 * A selector can include multiple elements.
 
 * Elements separated by whitespace describe "descendant selectors". For example `body p {}` specifies any paragraph 
 * tag (i.e. `<p>`) under body (`<body>`). The `body p {}` selector would match the `<p>` tag under both `<body><p>`
 * and `<body><div><p>`. To select only the child (i.e. the direct descendant), you'd write a selector like 
 * `body > p {}`. See MDN or another reference for more types of relationship selectors.
 *
 * Elements without whitespace describe "same selectors". For example `button.cool {}` would select
 * `<button class="cool">`. You can chain together multiple elements, but only a single HTML tag can be used per
 * group. i.e. `body p.dark a.light.disabled {}` will match `<body><p class="dark"><a class="light disabled">`.
 *
 * Pseudo-selectors can describe things that don't exist (yet). For example `p:before` selects a pseudo element
 * before `<p>`. By itself this isn't very useful, but content style can be used to insert text
 * (i.e. `content: "*";`).
 *
 * Pseudo-selectors can be used to describe events. For example `button:hover {}` is an event that is triggered
 * while the mouse cursor is hovering over an HTML tag.
 *
 * Finally, some pseudo-selectors can be used as functions or logical operations. The `:not()` pseudo selector
 * is one of the most useful, letting you select the opposite of the selector found inside. For example
 * `body :not(p)` will select any HTML tags in the body that aren't `<p>`. i.e. `<body><p>no</p><em>yes</em></body>`.
 * Again, see MDN for a complete list of pseudo-selectors.
 *
 * In CSS, the MOST SPECIFIC selector wins. Given a selector for `p {}` and `body p {}`, the 2nd selector is more
 * specific, so if you used the same style in both (i.e. `color: red;` vs `color: blue;`), `body p {}`'s color wins.
 *
 * Modern CSS lets us write nested selectors (i.e. `body { a {} }`), which is a shorthand for writing selectors
 * (i.e. `body a { }`). The `&` can be used in the place of the parent (i.e. `a { &.green {} }` is the same as
 * `a.green {}`.
 *
 * For completeness, CSS also supports something called media queries. `@media` queries let you define selectors
 * and styles that should only show up on desktop web browsers, mobile web browsers, or while printing. This makes
 * HTML and CSS useful for both static hard-copies (printed media, books) and dynamic media with a variety of screen
 * sizes and shapes.
*/

/* <body> */
body {
    background: #ccc;
    font-family: sans-serif;
    margin: 0;

    /* <body><a> */
    a {
        color: #444;
    }
}


/* <article> */
article {
    background: #eee;
    padding: 0.5em 1em 2em;
    display: inline-block; /* to not fill the full width */

    margin: 0 1em;  /* gap along edge */

    box-shadow: 0 0.35em 0.25em gray;
}


/* Navigation */
/* <nav> */
nav {
    padding: 0.5em 0.25em 0.25em;

    /* <nav><?? class="tab"> */
    .tab {
        padding: 0.25em 1em;
        text-transform: uppercase;
    }

    /* tabs with an 'a' tag are visually inactive */ 
    /* <nav><a class="tab"> */
    a.tab {
        background: #bbb;
        text-decoration: none;

        /* <nav><a class="tab">, but only when the mouse is hovering over the <a> element, or the <a> element is selected (pushing tab) */
        &:hover,
        &:focus {
            background: red;
            color: white;
        }
    }
    /* tabs without an 'a' tag are visually active */
    /* <nav><?? class="tab">, but never <a> tags */
    :not(a).tab {
        background: #eee;
        font-weight: bold;

        box-shadow: 0 0.35em 0.5em gray;
    }

    margin: 1em 1em 0;  /* gap along top and edge */
}

/* <section> */
section {
    margin: 0.5em 0;
    vertical-align: top;

    /* <section><h2> */
    h2 {
        font-size: 1.25em;
        margin-top: 1.5em;
        margin-bottom: 0.25em;
    }

    /* <section><h3> */
    h3 {
        font-size: 1em;
        display: inline-block;
        margin: 0;
    }

    /* Remove left padding for the first child of a section (if it doesn't have a -pad class) */
    /* <section><??>, but only the first-child tag of <section>, but only if it's not an <input> tag or it uses <?? class="-pad"> */
    :not(input):not(.-pad):first-child {
        /* no left padding */
        padding-left: 0;
    }

    /* <section class="-align-left"> */
    &.-align-left {
        display: inline-block;
        text-align: left;
        margin: 0;
    }
    /* <section class="-align-right"> */
    &.-align-right {
        display: inline-block;
        text-align: right;
        margin: 0;
    }
}

/* <label> */
label {
    padding-right: 0.5em;
    line-height: 1.5em;
    padding-left: 1em;

    /* Any labels marked as -required */
    /* <label class="-required"> */
    &.-required:before {
        content: "*";
        color: red;
    }
}

/* <input type="text"> */
input[type="text"] {
    border-radius: 0.25em;
    padding: 0.125em 0.5em;

    /* <input type="text" class="-monospace"> */
    &.-monospace {
        font-family: monospace;
    }
}
